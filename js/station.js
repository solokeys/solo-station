function prepare() {
    document.getElementById('success').textContent = '';
    document.getElementById('errors').textContent = '';
    document.getElementById('useragent').textContent = platform.description;
    if (!window.PublicKeyCredential) {
        document.getElementById('errors').textContent = 'Your browser does not support WebAuthn';
        return;
    }
    document.getElementById('success').textContent = 'Your browser supports WebAuthn';

}

function check() {
    // random nonce
    var challenge = new Uint8Array(32);
    window.crypto.getRandomValues(challenge);
    console.log('CHALLENGE', challenge);

    // known attestation certificates
    x5c_solo_secure = new Uint8Array([
        48, 130, 2, 225, 48, 130, 2, 136, 160, 3, 2, 1, 2, 2, 1, 1, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 48, 129, 128, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 18, 48, 16, 6, 3, 85, 4, 10, 12, 9, 83, 111, 108, 111, 32, 75, 101, 121, 115, 49, 16, 48, 14, 6, 3, 85, 4, 11, 12, 7, 82, 111, 111, 116, 32, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 49, 33, 48, 31, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 18, 104, 101, 108, 108, 111, 64, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 48, 32, 23, 13, 49, 56, 49, 49, 49, 49, 49, 50, 53, 50, 48, 48, 90, 24, 15, 50, 48, 54, 56, 49, 48, 50, 57, 49, 50, 53, 50, 48, 48, 90, 48, 129, 146, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 18, 48, 16, 6, 3, 85, 4, 10, 12, 9, 83, 111, 108, 111, 32, 75, 101, 121, 115, 49, 34, 48, 32, 6, 3, 85, 4, 11, 12, 25, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114, 32, 65, 116, 116, 101, 115, 116, 97, 116, 105, 111, 110, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 49, 33, 48, 31, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 18, 104, 101, 108, 108, 111, 64, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4, 34, 254, 15, 181, 42, 120, 190, 198, 69, 55, 26, 40, 167, 87, 67, 73, 164, 111, 133, 77, 202, 78, 37, 28, 159, 117, 48, 61, 191, 16, 213, 210, 210, 11, 185, 105, 44, 221, 178, 92, 20, 216, 57, 133, 18, 246, 35, 238, 145, 186, 198, 172, 255, 74, 26, 39, 239, 224, 193, 84, 63, 212, 217, 197, 163, 129, 220, 48, 129, 217, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 59, 230, 210, 192, 111, 242, 231, 176, 124, 157, 158, 40, 192, 32, 176, 13, 7, 200, 21, 200, 48, 129, 159, 6, 3, 85, 29, 35, 4, 129, 151, 48, 129, 148, 161, 129, 134, 164, 129, 131, 48, 129, 128, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 18, 48, 16, 6, 3, 85, 4, 10, 12, 9, 83, 111, 108, 111, 32, 75, 101, 121, 115, 49, 16, 48, 14, 6, 3, 85, 4, 11, 12, 7, 82, 111, 111, 116, 32, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 49, 33, 48, 31, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 18, 104, 101, 108, 108, 111, 64, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 130, 9, 0, 196, 71, 99, 146, 143, 244, 190, 140, 48, 9, 6, 3, 85, 29, 19, 4, 2, 48, 0, 48, 11, 6, 3, 85, 29, 15, 4, 4, 3, 2, 4, 240, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 3, 71, 0, 48, 68, 2, 32, 113, 16, 70, 44, 245, 22, 24, 151, 85, 202, 100, 80, 59, 105, 178, 223, 23, 113, 171, 173, 142, 192, 214, 166, 7, 61, 102, 138, 59, 187, 254, 97, 2, 32, 30, 130, 239, 235, 94, 78, 58, 0, 132, 100, 210, 248, 132, 195, 120, 53, 147, 99, 129, 46, 190, 166, 18, 50, 110, 41, 144, 200, 145, 75, 113, 82
    ]);

    x5c_solo_hacker = new Uint8Array([
        48, 130, 2, 233, 48, 130, 2, 142, 160, 3, 2, 1, 2, 2, 1, 1, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 48, 129, 130, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 20, 48, 18, 6, 3, 85, 4, 10, 12, 11, 83, 79, 76, 79, 32, 72, 65, 67, 75, 69, 82, 49, 16, 48, 14, 6, 3, 85, 4, 11, 12, 7, 82, 111, 111, 116, 32, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 49, 33, 48, 31, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 18, 104, 101, 108, 108, 111, 64, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 48, 32, 23, 13, 49, 56, 49, 50, 49, 49, 48, 50, 50, 48, 49, 50, 90, 24, 15, 50, 48, 54, 56, 49, 49, 50, 56, 48, 50, 50, 48, 49, 50, 90, 48, 129, 148, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 20, 48, 18, 6, 3, 85, 4, 10, 12, 11, 83, 79, 76, 79, 32, 72, 65, 67, 75, 69, 82, 49, 34, 48, 32, 6, 3, 85, 4, 11, 12, 25, 65, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114, 32, 65, 116, 116, 101, 115, 116, 97, 116, 105, 111, 110, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 49, 33, 48, 31, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 18, 104, 101, 108, 108, 111, 64, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4, 125, 120, 246, 190, 202, 64, 118, 59, 199, 92, 227, 172, 244, 39, 18, 195, 148, 152, 19, 55, 166, 65, 14, 146, 246, 154, 59, 21, 71, 141, 182, 206, 217, 211, 79, 57, 19, 237, 18, 123, 129, 20, 59, 232, 249, 76, 150, 56, 254, 227, 214, 203, 27, 83, 147, 162, 116, 247, 19, 154, 15, 157, 94, 166, 163, 129, 222, 48, 129, 219, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 154, 251, 162, 33, 9, 35, 181, 228, 122, 42, 29, 122, 108, 78, 3, 137, 146, 163, 14, 194, 48, 129, 161, 6, 3, 85, 29, 35, 4, 129, 153, 48, 129, 150, 161, 129, 136, 164, 129, 133, 48, 129, 130, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 20, 48, 18, 6, 3, 85, 4, 10, 12, 11, 83, 79, 76, 79, 32, 72, 65, 67, 75, 69, 82, 49, 16, 48, 14, 6, 3, 85, 4, 11, 12, 7, 82, 111, 111, 116, 32, 67, 65, 49, 21, 48, 19, 6, 3, 85, 4, 3, 12, 12, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 49, 33, 48, 31, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 18, 104, 101, 108, 108, 111, 64, 115, 111, 108, 111, 107, 101, 121, 115, 46, 99, 111, 109, 130, 9, 0, 235, 212, 132, 80, 20, 171, 209, 87, 48, 9, 6, 3, 85, 29, 19, 4, 2, 48, 0, 48, 11, 6, 3, 85, 29, 15, 4, 4, 3, 2, 4, 240, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 3, 73, 0, 48, 70, 2, 33, 0, 161, 123, 42, 29, 78, 66, 168, 104, 109, 101, 97, 30, 245, 254, 109, 198, 153, 174, 124, 32, 131, 22, 186, 214, 229, 15, 215, 13, 126, 5, 218, 201, 2, 33, 0, 146, 73, 243, 11, 87, 209, 25, 114, 242, 117, 90, 162, 224, 182, 189, 15, 7, 56, 208, 229, 162, 79, 160, 243, 135, 97, 130, 216, 205, 72, 252, 87
        ]);

    x5c_u2f_zero = new Uint8Array([
        48, 130, 1, 199, 48, 130, 1, 108, 2, 1, 0, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 48, 129, 129, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 15, 48, 13, 6, 3, 85, 4, 7, 12, 6, 76, 97, 117, 114, 101, 108, 49, 20, 48, 18, 6, 3, 85, 4, 10, 12, 11, 67, 111, 110, 111, 114, 67, 111, 32, 76, 76, 67, 49, 20, 48, 18, 6, 3, 85, 4, 3, 12, 11, 99, 111, 110, 111, 114, 99, 111, 46, 99, 111, 109, 49, 34, 48, 32, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 19, 99, 111, 110, 111, 114, 99, 111, 64, 99, 111, 110, 111, 114, 99, 111, 46, 99, 111, 109, 48, 32, 23, 13, 49, 55, 49, 49, 50, 49, 48, 51, 48, 48, 51, 49, 90, 24, 15, 50, 48, 54, 55, 49, 49, 48, 57, 48, 51, 48, 48, 51, 49, 90, 48, 90, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 85, 83, 49, 17, 48, 15, 6, 3, 85, 4, 8, 12, 8, 77, 97, 114, 121, 108, 97, 110, 100, 49, 15, 48, 13, 6, 3, 85, 4, 7, 12, 6, 76, 97, 117, 114, 101, 108, 49, 17, 48, 15, 6, 3, 85, 4, 10, 12, 8, 85, 50, 70, 32, 90, 101, 114, 111, 49, 20, 48, 18, 6, 3, 85, 4, 3, 12, 11, 117, 50, 102, 122, 101, 114, 111, 46, 99, 111, 109, 48, 89, 48, 19, 6, 7, 42, 134, 72, 206, 61, 2, 1, 6, 8, 42, 134, 72, 206, 61, 3, 1, 7, 3, 66, 0, 4, 215, 215, 229, 192, 66, 203, 6, 122, 162, 250, 172, 119, 198, 151, 103, 83, 224, 41, 147, 221, 100, 26, 246, 95, 51, 40, 229, 40, 143, 235, 131, 231, 207, 212, 35, 253, 214, 235, 42, 137, 6, 34, 49, 98, 170, 148, 62, 118, 29, 42, 174, 49, 0, 31, 26, 211, 194, 249, 70, 77, 171, 241, 78, 232, 48, 10, 6, 8, 42, 134, 72, 206, 61, 4, 3, 2, 3, 73, 0, 48, 70, 2, 33, 0, 240, 68, 255, 145, 205, 174, 69, 35, 148, 125, 9, 40, 152, 9, 100, 229, 229, 32, 151, 56, 154, 109, 5, 8, 127, 82, 238, 224, 179, 16, 67, 65, 2, 33, 0, 146, 23, 35, 17, 124, 3, 193, 35, 164, 231, 2, 10, 250, 200, 90, 72, 121, 81, 48, 132, 202, 19, 216, 29, 220, 147, 21, 2, 178, 71, 224, 80
    ]);

    // our relying party
    let rp_id = window.location.hostname;
    console.log('RELYING PARTY ID', rp_id);

    // GOAL: register a key signed by key's attestation certificate
    var makePublicKey = {
    rp: {
        name: 'SoloKeys Station',
        id: rp_id,
    },

    attestation: 'direct',

    user: {
        id: new Uint8Array([0, 1, 2, 3, 4, 5, 6, 7]),
        name: 'jsmith@example.com',
        displayName: 'Joe Smith',
    },

    challenge,

    pubKeyCredParams: [
        { type: 'public-key', alg: -7 },
    ],

    timeout: 30000,
        excludeCredentials: [],
    };

    let credPromise = navigator.credentials.create(
        {publicKey: makePublicKey}
    ).then(response => {
        document.getElementById('success').textContent = 'Got a response';
        console.log('PRE-DE-CBOR',response.response.attestationObject);
        var attestation = CBOR.decode(response.response.attestationObject);
        console.log('ATTESTATION', attestation);
        var x5c = attestation.attStmt.x5c[0];
        // console.log('X5C', x5c.join(', '));
        console.log('X5C', x5c);
        let solo_secure = JSON.stringify(x5c) === JSON.stringify(x5c_solo_secure);
        let solo_hacker = JSON.stringify(x5c) === JSON.stringify(x5c_solo_hacker);
        let u2f_zero = JSON.stringify(x5c) === JSON.stringify(x5c_u2f_zero);

        if (solo_secure) {
            console.log("THIS IS A SOLO SECURE");
            document.getElementById('success').textContent += ': valid Solo Secure';
        } else if (solo_hacker) {
            console.log("THIS IS PROBABLY A SOLO HACKER");
            document.getElementById('success').textContent += ': key attests as Solo Hacker';
        } else if (u2f_zero) {
            console.log("THIS IS PROBABLY A U2F ZERO");
            document.getElementById('success').textContent += ': key attests as U2F Zero';
        } else {
            console.log("UNKNOWN ATTESTATION");
            document.getElementById('errors').textContent = 'unknown key';
        }
    })
    .catch(e => {
        console.log(e);
        document.getElementById('debug').textContent = e.message;
    });
}
